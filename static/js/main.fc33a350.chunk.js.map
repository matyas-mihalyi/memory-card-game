{"version":3,"sources":["components/cards.tsx","components/table.tsx","components/navbar.tsx","hooks/get-random-mons.tsx","hooks/card-state.tsx","hooks/score-hook.tsx","components/settings-modal.tsx","components/score-modal.tsx","App.tsx","hooks/settings-hook.tsx","index.tsx"],"names":["Cards","handleClick","flippedCards","matchedCards","cardsToRender","className","map","pokemon","i","onClick","some","card","src","sprite","alt","pokemonName","Table","numberOfCards","Fragment","length","Navbar","toggleModal","userMoves","refreshPokemons","clearCards","shuffle","array","j","Math","floor","random","temp","useCardStates","flipBack","pokemons","addToMoves","resetMoves","storeScore","useState","setFlippedCards","setMatchedCards","scoreVisible","setScoreVisible","useEffect","evaluate","setTimeout","toggleScoreModal","a","b","pokemonId","state","id","clearTimeout","icon","document","querySelector","style","transform","ontransitionend","useScore","setUserMoves","num","highScores","localStorage","getItem","undefined","JSON","parse","setItem","stringify","getHighScore","highScore","SettingsModal","isVisible","decrementCards","incrementCards","getGen","generation","clearAll","ReactDOM","toString","name","onChange","e","target","value","defaultValue","ScoreModal","toggle","score","App","setIsVisible","monsToRender","setMonsToRender","setNumberOfCards","setGeneration","getIds","str","split","parseInt","arr","Array","selectedMons","slice","useSettings","setPokemons","allCards","forEach","fetch","then","res","json","data","sprites","front_default","pokemonCopy","push","allmons","sort","catch","error","console","log","useFetchMons","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.fc33a350.chunk.js","sourcesContent":["import { CardsProps } from \"../interfaces\";\r\n\r\n\r\nexport const Cards = ({ handleClick, flippedCards, matchedCards, cardsToRender}: CardsProps): JSX.Element => {\r\n\r\n\r\n  return (\r\n    <div className=\"cards\">\r\n    { \r\n      cardsToRender.map((pokemon, i) => \r\n        (\r\n        <div className=\"card-wrapper\" key={i} onClick={()=>handleClick(i)}>  \r\n          <div className={\r\n            flippedCards.some((card: number)=> card === i) || matchedCards.some((card: number)=> card === i) \r\n            ? \"card-inner flipped\"\r\n            : \"card-inner\"\r\n            }>\r\n            <div className=\"card-front\">\r\n              <img src={pokemon.sprite} alt={pokemon.pokemonName} />\r\n            </div>\r\n            <div className=\"card-back\" />\r\n          </div>\r\n        </div>\r\n      ))\r\n    }    \r\n    </div>\r\n    )\r\n}\r\n","import { Cards, } from \"./cards\";\r\nimport { TableProps } from \"../interfaces\";\r\nimport React from \"react\";\r\n\r\n\r\n//COMPONENT\r\nexport const Table = ({numberOfCards, cardsToRender, handleClick, flippedCards, matchedCards }: TableProps) => {\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {cardsToRender.length === numberOfCards\r\n        ? <Cards \r\n            cardsToRender={cardsToRender}\r\n            numberOfCards={numberOfCards}\r\n            handleClick={handleClick}\r\n            flippedCards={flippedCards}\r\n            matchedCards={matchedCards}\r\n          />\r\n        : <div className=\"loading-message\">Loading cards...</div>}\r\n    </React.Fragment>\r\n  )\r\n}","import React from \"react\"\r\nimport { NavbarProps } from \"../interfaces\"\r\n\r\nexport const Navbar = ({ toggleModal, userMoves, refreshPokemons, clearCards }: NavbarProps): JSX.Element => {\r\n  \r\n  return (\r\n    <nav>\r\n      <div className=\"score\"><span className=\"label\">Moves:</span><span className=\"moves\">{userMoves}</span></div>\r\n      <div className=\"reset\" onClick={()=>{clearCards(); refreshPokemons()}}><span className=\"material-icons\">restart_alt</span></div>\r\n      <div className=\"menu\" onClick={toggleModal}><span className=\"material-icons\">settings</span></div>\r\n    </nav>\r\n\r\n  )\r\n}","import { Pokemon } from \"../interfaces\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\n//source for shuffling algorhythm: https://medium.com/@nitinpatel_20236/how-to-shuffle-correctly-shuffle-an-array-in-javascript-15ea3f84bfb\r\nexport const shuffle = (array: Pokemon[]|number[]) => {\r\n  for(let i = array.length - 1; i > 0; i--){\r\n    const j = Math.floor(Math.random() * i)\r\n    const temp = array[i]\r\n    array[i] = array[j]\r\n    array[j] = temp\r\n  }\r\n}\r\n\r\nconst KantoIds = (): number[] => {\r\n  const arr: number[] = new Array(150);\r\n  for (let i = 0; i < arr.length; i++){   //based on https://tutorial.eyehunts.com/js/javascript-fill-array-with-incrementing-numbers-integer-example-code/\r\n    arr[i] =i+1;\r\n  }\r\n  shuffle(arr)\r\n  return arr\r\n}\r\n\r\n//get the first n number of IDs based on number of cards settings\r\nexport const pokemonIds = (num: number): number[] => {\r\n  \r\n  return KantoIds().slice(0, num/2);\r\n}\r\n\r\n\r\n//CUSTOM HOOK FOR FETCHING POKEMON DATA\r\n\r\nexport const useFetchMons = (monsToRender: number[]) => {\r\n  const [pokemons, setPokemons] = useState<Pokemon[]>([]); \r\n\r\n\r\n  const refreshPokemons = () => {\r\n    let allCards: Pokemon[] = [];\r\n    monsToRender.forEach((id, i) => {\r\n      fetch(`https://pokeapi.co/api/v2/pokemon/${id}`)\r\n      .then(res => res.json())\r\n      .then((data) => {\r\n        const pokemon = {\r\n          pokemonName: data.name+\"_1\",\r\n          pokemonId: data.id,\r\n          sprite: `${data.sprites.front_default}`,\r\n        }\r\n        const pokemonCopy = {\r\n          pokemonName: data.name+\"_2\",\r\n          pokemonId: data.id,\r\n          sprite: `${data.sprites.front_default}`\r\n        }\r\n        allCards.push(pokemon, pokemonCopy); \r\n        return allCards;\r\n      })\r\n      .then((allmons)=> {\r\n        if (allmons.length === monsToRender.length *2) {\r\n          allmons.sort(()=> Math.random() - 0.5);\r\n          setPokemons(() => (allmons));\r\n        }\r\n      })\r\n      .catch((error)=> console.log(error));\r\n    });\r\n  }\r\n\r\n  /*eslint-disable-next-line*/\r\n  useEffect(()=> {refreshPokemons()}, [monsToRender]);\r\n  \r\n  return  { pokemons, refreshPokemons } \r\n}","\r\nimport { useState, useEffect } from \"react\";\r\nimport { CardStateProps } from \"../interfaces\";\r\n\r\nexport const useCardStates = ({pokemons, addToMoves, resetMoves, userMoves, storeScore}: CardStateProps) => {\r\n  const [flippedCards, setFlippedCards] = useState<number[]>([]);\r\n  const [matchedCards, setMatchedCards] = useState<number[]>([]);\r\n  const [scoreVisible, setScoreVisible] = useState<boolean>(false);\r\n\r\n  //evaluate recently flipped cards \r\n  useEffect(()=>{\r\n    //if cards match keep\r\n    if (flippedCards.length === 2) {evaluate(flippedCards);};\r\n  /*eslint-disable-next-line*/\r\n  }, [flippedCards])\r\n\r\n  useEffect(()=> {\r\n    if(matchedCards.length > 1 && matchedCards.length === pokemons.length) {\r\n      storeScore(userMoves);\r\n      setTimeout(()=>{toggleScoreModal();}, 1500);\r\n    }\r\n  /*eslint-disable-next-line*/\r\n  }, [matchedCards, pokemons.length]);\r\n\r\n  \r\n  //timeout to flip back cards if not matched\r\n  let flipBack:any; \r\n  const cardFlip = () => {flipBack = setTimeout(()=>{setFlippedCards(()=>([]))},1800);};\r\n  const noFlip = () => {clearTimeout(flipBack);};\r\n\r\n  const evaluate = (flippedCards: number[]):void => {\r\n    const [a, b] = flippedCards;\r\n    //if it's a match\r\n    if (pokemons[a].pokemonId === pokemons[b].pokemonId) {\r\n      setMatchedCards((state)=>([...state, a, b]));\r\n    } else {\r\n      cardFlip();\r\n    }\r\n  } \r\n\r\n  //handleclick\r\n  const handleClick = (i: number):void => {\r\n    //check if it's already flipped\r\n    if (flippedCards.some((id)=> id === i) || matchedCards.some((id)=> id === i)) {\r\n      return;\r\n    }\r\n    //add to flippedCards & add to moves\r\n    else if (flippedCards.length === 1) {\r\n      setFlippedCards((state)=>([...state, i]));\r\n      addToMoves();\r\n    } else {\r\n      setFlippedCards(()=>([i]));\r\n      addToMoves();\r\n      noFlip();\r\n    }\r\n  }\r\n\r\n  const clearCards = () => {\r\n    const icon = document.querySelector(\".reset\")!.querySelector(\"span\")!;\r\n    icon.style.transform = \"rotate(-360deg)\";\r\n    icon.ontransitionend = (()=>icon.style.transform= \"rotate(0deg)\");\r\n    setFlippedCards(()=>[]);\r\n    setMatchedCards(()=>[]);\r\n    //reset moves\r\n    resetMoves();\r\n  }\r\n\r\n  //toggle score modal\r\n  const toggleScoreModal = () => {\r\n    setScoreVisible(!scoreVisible);\r\n  }\r\n\r\n \r\n\r\n\r\n  return {flippedCards, matchedCards, handleClick, clearCards, toggleScoreModal, scoreVisible}\r\n\r\n}\r\n","import { useState } from \"react\"\r\n\r\nexport const useScore = (numberOfCards: number) => {\r\n  const [userMoves, setUserMoves] = useState<number>(0);\r\n  const addToMoves = () => {\r\n    setUserMoves((state)=> (state + 1));\r\n  }\r\n  \r\n  const resetMoves = () => {\r\n    setUserMoves(() => 0);\r\n  }\r\n  \r\n  //store recors in local storage\r\n  const storeScore = (num: number) => {    \r\n    let highScores: any = {};\r\n\r\n    //if highscores is not empty assign it to\r\n    if (localStorage.getItem(\"Highscores\") !== null) {\r\n      highScores = (localStorage.getItem(\"Highscores\"));\r\n      highScores = JSON.parse(highScores);\r\n      //if no record is stored with this many cards\r\n      if (highScores[numberOfCards] === undefined) {\r\n        highScores[numberOfCards] = num;\r\n        localStorage.setItem(\"Highscores\",  JSON.stringify(highScores))\r\n        //if there is a record for that num of cards\r\n      } else if (highScores[numberOfCards] !== undefined) {\r\n        let storedRecord = highScores[numberOfCards];\r\n        //if the score is lower remove the previous score from the array and insert the new one    \r\n        if (storedRecord > num) {\r\n          //add current score\r\n          highScores[numberOfCards] = num;\r\n          //add to localstorage\r\n          localStorage.setItem(\"Highscores\",  JSON.stringify(highScores))\r\n        }    \r\n      }\r\n      //if there is no previous record\r\n    } else {\r\n      highScores[numberOfCards] = num;\r\n      localStorage.setItem(\"Highscores\", JSON.stringify(highScores));\r\n    }\r\n\r\n  }\r\n\r\n  const getHighScore = (): number => {\r\n    let highScore: any = localStorage.getItem(\"Highscores\");\r\n    highScore = JSON.parse(highScore);\r\n    return highScore[numberOfCards];\r\n  }\r\n\r\n  return { userMoves, addToMoves, resetMoves, storeScore, getHighScore }\r\n}","import * as React from 'react'\r\nimport * as ReactDOM from 'react-dom'\r\nimport { SettingsModalProps } from '../interfaces'\r\n\r\n  \r\nexport  const SettingsModal = ({ isVisible, toggleModal, decrementCards, incrementCards, numberOfCards, getGen, generation, clearAll}: SettingsModalProps ) => {\r\n\r\n  return isVisible\r\n  ? ReactDOM.createPortal(\r\n      <div className=\"modal-wrapper\">\r\n        <div className=\"container\">\r\n            <h3>Number of Pokémons</h3>\r\n          <div className=\"number-of-cards\">\r\n            <span onClick={()=>{decrementCards(); clearAll()}} className=\"material-icons\">remove</span>\r\n            <span className=\"number-of-mons\">{numberOfCards.toString()}</span>\r\n            <span onClick={()=>{incrementCards(); clearAll()}} className=\"material-icons\">add</span>\r\n          </div>\r\n          <h3>Choose your region</h3>\r\n            <select name=\"region-picker\" id=\"region\" onChange={(e)=>{getGen(e.target.value); clearAll()}} defaultValue={generation}>\r\n              <option value=\"1,151\">Kanto</option>\r\n              <option value=\"152,251\">Johto</option>\r\n              <option value=\"252,386\">Hoenn</option>\r\n              <option value=\"387,493\">Sinnoh</option>\r\n              <option value=\"494,649\">Unova</option>\r\n              <option value=\"650,721\">Kalos</option>\r\n              <option value=\"722, 809\">Alola</option>\r\n              <option value=\"810,898\">Galar</option>\r\n            </select>\r\n\r\n            <button onClick={toggleModal}>OK</button>\r\n        </div>\r\n      </div>, document.querySelector(\"#modal\")!\r\n    )\r\n  : null;\r\n}\r\n\r\n\r\n","import * as React from 'react'\r\nimport * as ReactDOM from 'react-dom'\r\nimport { ScoreModalProps } from '../interfaces';\r\n\r\nexport  const ScoreModal = ({toggle, isVisible, score, getHighScore, clearAll}: ScoreModalProps) => {\r\n\r\n  return isVisible\r\n  ? ReactDOM.createPortal(\r\n      <div className=\"modal-wrapper\">\r\n        <div className=\"container\">\r\n        <h3>Congratulations!</h3>\r\n        <div className=\"message-wrapper\">\r\n            <p>You got all the pairs in</p>\r\n            <strong>{score}</strong>\r\n            <p>moves.</p>\r\n            <br />\r\n            <p>Your personal best is <b>{getHighScore()}</b> moves</p>\r\n        </div>\r\n            <button \r\n              onClick={()=> {\r\n                toggle();\r\n                clearAll();\r\n              }\r\n            }>OK</button>\r\n        </div>\r\n      </div>, document.querySelector(\"#modal\")!\r\n    )\r\n  : null;\r\n}\r\n","import React from 'react';\r\nimport { Table } from './components/table';\r\nimport { Navbar } from './components/navbar'\r\nimport { useSettings } from './hooks/settings-hook';\r\nimport { useFetchMons } from './hooks/get-random-mons';\r\nimport { useCardStates } from './hooks/card-state';\r\nimport { useScore } from './hooks/score-hook';\r\nimport { SettingsModal } from './components/settings-modal';\r\nimport {ScoreModal} from './components/score-modal';\r\n\r\nfunction App() {\r\n\r\n  const { isVisible, toggleModal, getGen, monsToRender, numberOfCards, incrementCards, decrementCards, generation} = useSettings();\r\n  const { pokemons, refreshPokemons } = useFetchMons(monsToRender);\r\n  const { userMoves, addToMoves, resetMoves, getHighScore } = useScore(numberOfCards);\r\n  const { storeScore } = useScore(numberOfCards);\r\n  const { flippedCards, matchedCards, handleClick, clearCards, toggleScoreModal, scoreVisible } = useCardStates({pokemons, addToMoves, resetMoves, userMoves, storeScore});\r\n\r\n  const clearAll = () => {\r\n    refreshPokemons();\r\n    resetMoves();\r\n    clearCards();\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n    <Table \r\n      //number of cards\r\n      numberOfCards={numberOfCards}\r\n      cardsToRender={pokemons}\r\n      handleClick={handleClick}\r\n      flippedCards={flippedCards}\r\n      matchedCards={matchedCards}\r\n    />\r\n    <Navbar \r\n      toggleModal={toggleModal}\r\n      userMoves={userMoves}\r\n      refreshPokemons={refreshPokemons}\r\n      clearCards={clearCards}\r\n    />\r\n    <SettingsModal \r\n      numberOfCards={numberOfCards}\r\n      incrementCards={incrementCards}\r\n      decrementCards={decrementCards}\r\n      isVisible={isVisible} \r\n      toggleModal={toggleModal}\r\n      getGen={getGen}\r\n      generation={generation}\r\n      clearAll={clearAll}\r\n    />\r\n    <ScoreModal \r\n      toggle={toggleScoreModal}\r\n      isVisible={scoreVisible}\r\n      score={userMoves}\r\n      clearAll={clearAll}\r\n      getHighScore={getHighScore}\r\n    />\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","//from https://medium.com/swlh/building-modals-in-react-64d92591f4b\r\n\r\nimport { useState, useEffect } from \"react\";\r\nimport { shuffle } from \"./get-random-mons\";\r\n\r\n\r\n\r\n\r\nexport const useSettings = () => {\r\n  const [isVisible, setIsVisible] = useState(false);\r\n  const [monsToRender, setMonsToRender] = useState<number[]>([]);\r\n  const [numberOfCards, setNumberOfCards] = useState<number>(12);\r\n  const [generation, setGeneration] = useState<string>(\"1,151\");\r\n\r\n  /* eslint-disable-next-line */\r\n  useEffect(()=> {getIds(generation)}, [numberOfCards, generation]);\r\n\r\n  const toggleModal = () => {\r\n    setIsVisible(!isVisible);\r\n  }\r\n\r\n  const getGen = (str:string) => {\r\n    setGeneration(str)\r\n  }\r\n\r\n  const getIds = (str: string) => {\r\n    let [a, b]: any = str.split(\",\");\r\n    a = parseInt(a);\r\n    b = parseInt(b);\r\n    const arr: number[] = new Array(b - a + 1);\r\n    for (let i = 0; i < arr.length; i++){   //based on https://tutorial.eyehunts.com/js/javascript-fill-array-with-incrementing-numbers-integer-example-code/\r\n      arr[i] = a + i;\r\n    }\r\n    shuffle(arr);\r\n    const selectedMons = arr.slice(0, numberOfCards/2);\r\n    setMonsToRender(()=>(selectedMons));\r\n  } \r\n\r\n\r\n  //increment & decrement number of cards\r\n\r\n  const incrementCards = () => {\r\n    if (numberOfCards < 28) {\r\n      setNumberOfCards((state)=>(state+4));\r\n    }\r\n  }\r\n  \r\n  const decrementCards = () => {\r\n    if (numberOfCards > 4) {\r\n      setNumberOfCards((state)=>(state-4));\r\n    }\r\n  }\r\n  \r\n\r\n  return {\r\n    numberOfCards,\r\n    incrementCards,\r\n    decrementCards,\r\n    isVisible,\r\n    toggleModal,\r\n    getGen,\r\n    getIds,\r\n    generation,\r\n    monsToRender,\r\n  }\r\n};\r\n\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}