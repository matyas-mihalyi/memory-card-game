{"version":3,"sources":["components/cards.tsx","components/table.tsx","components/modal.tsx","components/navbar.tsx","hooks/get-random-mons.tsx","hooks/card-state.tsx","App.tsx","hooks/modal-hook.tsx","hooks/number-of-cards.tsx","index.tsx"],"names":["Cards","handleClick","flippedCards","matchedCards","cardsToRender","className","map","pokemon","i","onClick","some","card","src","sprite","alt","pokemonName","Table","numberOfCards","Fragment","length","Modal","isVisible","toggleModal","decrementCards","incrementCards","ReactDOM","toString","document","querySelector","Navbar","refreshPokemons","clearCards","KantoIds","arr","Array","array","j","Math","floor","random","temp","shuffle","useFetchMons","num","useState","pokemons","setPokemons","pokemonsToFetch","slice","pokemonIds","allCards","forEach","id","fetch","then","res","json","data","name","pokemonId","sprites","front_default","pokemonCopy","push","allmons","sort","catch","error","console","log","useEffect","useCardStates","flipBack","setFlippedCards","setMatchedCards","evaluate","a","b","state","setTimeout","clearTimeout","icon","style","transform","ontransitionend","App","setIsVisible","useModal","setNumberOfCards","useNumberOfCards","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c5f32c82.chunk.js","sourcesContent":["import { CardsProps } from \"../interfaces\";\r\n\r\n\r\nexport const Cards = ({ handleClick, flippedCards, matchedCards, cardsToRender}: CardsProps): JSX.Element => {\r\n\r\n\r\n  return (\r\n    <div className=\"cards\">\r\n    { \r\n      cardsToRender.map((pokemon, i) => \r\n        (\r\n        <div className=\"card-wrapper\" key={i} onClick={()=>handleClick(i)}>  \r\n          <div className={\r\n            flippedCards.some((card: number)=> card === i) || matchedCards.some((card: number)=> card === i) \r\n            ? \"card-inner flipped\"\r\n            : \"card-inner\"\r\n            }>\r\n            <div className=\"card-front\">\r\n              <img src={pokemon.sprite} alt={pokemon.pokemonName} />\r\n            </div>\r\n            <div className=\"card-back\" />\r\n          </div>\r\n        </div>\r\n      ))\r\n    }    \r\n    </div>\r\n    )\r\n}\r\n","import { Cards, } from \"./cards\";\r\nimport { TableProps } from \"../interfaces\";\r\nimport React from \"react\";\r\n\r\n\r\n//COMPONENT\r\nexport const Table = ({numberOfCards, cardsToRender, handleClick, flippedCards, matchedCards }: TableProps) => {\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {cardsToRender.length === numberOfCards\r\n        ? <Cards \r\n            cardsToRender={cardsToRender}\r\n            numberOfCards={numberOfCards}\r\n            handleClick={handleClick}\r\n            flippedCards={flippedCards}\r\n            matchedCards={matchedCards}\r\n          />\r\n        : <div className=\"loading-message\">Loading cards...</div>}\r\n    </React.Fragment>\r\n  )\r\n}","import * as React from 'react'\r\nimport * as ReactDOM from 'react-dom'\r\nimport { ModalProps } from '../interfaces'\r\n\r\n  \r\nexport  const Modal = ({ isVisible, toggleModal, decrementCards, incrementCards, numberOfCards}: ModalProps ) => {\r\n\r\n  return isVisible\r\n  ? ReactDOM.createPortal(\r\n      <div className=\"modal-wrapper\">\r\n        <div className=\"settings-container\">\r\n            <h3>Number of Pok√©mons</h3>\r\n          <div className=\"number-of-cards\">\r\n            <span onClick={()=>decrementCards()} className=\"material-icons\">remove</span>\r\n            <span className=\"number-of-mons\">{numberOfCards.toString()}</span>\r\n            <span onClick={()=>incrementCards()} className=\"material-icons\">add</span>\r\n          </div>\r\n\r\n            <button onClick={toggleModal}>OK</button>\r\n        </div>\r\n      </div>, document.querySelector(\"#modal\")!\r\n    )\r\n  : null;\r\n}\r\n\r\n\r\n","import React from \"react\"\r\nimport { NavbarProps } from \"../interfaces\"\r\nimport { Modal } from \"./modal\"\r\n\r\nexport const Navbar = ({isVisible, toggleModal, numberOfCards, incrementCards, decrementCards, refreshPokemons, clearCards}: NavbarProps): JSX.Element => {\r\n  \r\n  return (\r\n    <nav>\r\n      <div className=\"timer\">1:00</div>\r\n      <div className=\"reset\" onClick={()=>{clearCards(); refreshPokemons(numberOfCards)}}><span className=\"material-icons\">restart_alt</span></div>\r\n      <div className=\"menu\" onClick={toggleModal}><span className=\"material-icons\">settings</span></div>\r\n      <Modal isVisible={isVisible} toggleModal={toggleModal} numberOfCards={numberOfCards} incrementCards={incrementCards} decrementCards={decrementCards}/>\r\n    </nav>\r\n\r\n  )\r\n}","import { Pokemon } from \"../interfaces\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\n//source for shuffling algorhythm: https://medium.com/@nitinpatel_20236/how-to-shuffle-correctly-shuffle-an-array-in-javascript-15ea3f84bfb\r\nexport const shuffle = (array: Pokemon[]|number[]) => {\r\n  for(let i = array.length - 1; i > 0; i--){\r\n    const j = Math.floor(Math.random() * i)\r\n    const temp = array[i]\r\n    array[i] = array[j]\r\n    array[j] = temp\r\n  }\r\n}\r\n\r\nconst KantoIds = (): number[] => {\r\n  const arr: number[] = new Array(150);\r\n  for (let i = 0; i < arr.length; i++){   //based on https://tutorial.eyehunts.com/js/javascript-fill-array-with-incrementing-numbers-integer-example-code/\r\n    arr[i] =i+1;\r\n  }\r\n  shuffle(arr)\r\n  return arr\r\n}\r\n\r\n//get the first n number of IDs based on number of cards settings\r\nexport const pokemonIds = (num: number): number[] => {\r\n  return KantoIds().slice(0, num/2);\r\n}\r\n\r\n\r\n//CUSTOM HOOK FOR FETCHING POKEMON DATA\r\n\r\nexport const useFetchMons = (num: number) => {\r\n  const [pokemons, setPokemons] = useState<Pokemon[]>([]); \r\n\r\n  const pokemonsToFetch = pokemonIds(num);\r\n\r\n  const refreshPokemons = () => {\r\n    let allCards: Pokemon[] = [];\r\n    pokemonsToFetch.forEach((id, i) => {\r\n      fetch(`https://pokeapi.co/api/v2/pokemon/${id}`)\r\n      .then(res => res.json())\r\n      .then((data) => {\r\n        const pokemon = {\r\n          pokemonName: data.name+\"_1\",\r\n          pokemonId: data.id,\r\n          sprite: `${data.sprites.front_default}`,\r\n        }\r\n        const pokemonCopy = {\r\n          pokemonName: data.name+\"_2\",\r\n          pokemonId: data.id,\r\n          sprite: `${data.sprites.front_default}`\r\n        }\r\n        allCards.push(pokemon, pokemonCopy); \r\n        return allCards;\r\n      })\r\n      .then((allmons)=> {\r\n        if (allmons.length === pokemonsToFetch.length *2) {\r\n          allmons.sort(()=> Math.random() - 0.5);\r\n          setPokemons(() => (allmons));\r\n        }\r\n      })\r\n      .catch((error)=> console.log(error));\r\n    });\r\n  }\r\n\r\n\r\n  useEffect(()=> {\r\n    refreshPokemons()\r\n  }, [num]);\r\n  return  { pokemons, refreshPokemons } \r\n}","\r\nimport { useState, useEffect } from \"react\";\r\nimport { Pokemon } from \"../interfaces\";\r\n\r\nexport const useCardStates = (cardsToRender: Pokemon[]) => {\r\n  const [flippedCards, setFlippedCards] = useState<number[]>([]);\r\n  const [matchedCards, setMatchedCards] = useState<number[]>([]);\r\n\r\n  //evaluate recently flipped cards \r\n  useEffect(()=>{\r\n    //if cards match keep\r\n    if (flippedCards.length === 2) {evaluate(flippedCards);};\r\n  }, [flippedCards])\r\n\r\n  //timeout to flip back cards if not matched\r\n  let flipBack:any; \r\n  const cardFlip = () => {flipBack = setTimeout(()=>{setFlippedCards(()=>([]))},1800);};\r\n  const noFlip = () => {clearTimeout(flipBack);};\r\n\r\n  const evaluate = (flippedCards: number[]):void => {\r\n    const [a, b] = flippedCards;\r\n    //if it's a match\r\n    if (cardsToRender[a].pokemonId === cardsToRender[b].pokemonId) {\r\n      setMatchedCards((state)=>([...state, a, b]));\r\n    } else {\r\n      cardFlip();\r\n    }\r\n  } \r\n\r\n  //handleclick\r\n  const handleClick = (i: number):void => {\r\n    //check if it's already flipped\r\n    if (flippedCards.some((id)=> id === i) || matchedCards.some((id)=> id === i)) {\r\n      return;\r\n    }\r\n    //add to flippedCards\r\n    else if (flippedCards.length === 1) {\r\n      setFlippedCards((state)=>([...state, i]));\r\n    } else {\r\n      setFlippedCards(()=>([i]));\r\n      noFlip()\r\n    }\r\n  }\r\n\r\n  const clearCards = () => {\r\n    const icon = document.querySelector(\".reset\")!.querySelector(\"span\")!;\r\n    icon.style.transform = \"rotate(-360deg)\";\r\n    icon.ontransitionend = (()=>icon.style.transform= \"rotate(0deg)\")\r\n    setFlippedCards(()=>[])\r\n    setMatchedCards(()=>[])\r\n  }\r\n\r\n  return {flippedCards, matchedCards, handleClick, clearCards}\r\n\r\n}\r\n\r\n","import React from 'react';\r\nimport { Table } from './components/table';\r\nimport { Navbar } from './components/navbar'\r\nimport { useNumberOfCards } from './hooks/number-of-cards'\r\nimport { useModal } from './hooks/modal-hook';\r\nimport { useFetchMons } from './hooks/get-random-mons';\r\nimport { useCardStates } from './hooks/card-state';\r\n\r\nfunction App() {\r\n\r\n  const { isVisible, toggleModal} = useModal();\r\n  const { numberOfCards, incrementCards, decrementCards } = useNumberOfCards();\r\n  const { pokemons, refreshPokemons } = useFetchMons(numberOfCards);\r\n  const { flippedCards, matchedCards, handleClick, clearCards } = useCardStates(pokemons)\r\n\r\n  return (\r\n    <React.Fragment>\r\n    <Table \r\n      //number of cards\r\n      numberOfCards={numberOfCards}\r\n      cardsToRender={pokemons}\r\n      handleClick={handleClick}\r\n      flippedCards={flippedCards}\r\n      matchedCards={matchedCards}\r\n    />\r\n    <Navbar \r\n      //modal\r\n      isVisible={isVisible} \r\n      toggleModal={toggleModal}\r\n      //number of cards\r\n      numberOfCards={numberOfCards}\r\n      incrementCards={incrementCards}\r\n      decrementCards={decrementCards}\r\n      //refresh cards\r\n      refreshPokemons={refreshPokemons}\r\n      clearCards={clearCards}\r\n    />\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","//from https://medium.com/swlh/building-modals-in-react-64d92591f4b\r\n\r\nimport { useState } from \"react\";\r\n\r\nexport const useModal = () => {\r\n  const [isVisible, setIsVisible] = useState(false);\r\n  \r\n  function toggleModal() {\r\n    setIsVisible(!isVisible);\r\n  }\r\n\r\n  return {\r\n    isVisible,\r\n    toggleModal,\r\n  }\r\n};\r\n\r\n\r\n\r\n","import { useState } from \"react\";\r\n\r\nexport const useNumberOfCards = () => {\r\n  const [numberOfCards, setNumberOfCards] = useState<number>(12)\r\n\r\n  //increment & decrement number of cards\r\n\r\n  const incrementCards = () => {\r\n    if (numberOfCards < 28) {\r\n      setNumberOfCards((state)=>(state+4));\r\n    }\r\n  }\r\n  \r\n  const decrementCards = () => {\r\n    if (numberOfCards > 4) {\r\n      setNumberOfCards((state)=>(state-4));\r\n    }\r\n  }\r\n  \r\n  return { numberOfCards, incrementCards, decrementCards, }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}