{"version":3,"sources":["components/cards.tsx","components/table.tsx","components/navbar.tsx","hooks/get-random-mons.tsx","hooks/card-state.tsx","hooks/score-hook.tsx","components/settings-modal.tsx","components/score-modal.tsx","App.tsx","hooks/settings-hook.tsx","hooks/number-of-cards.tsx","index.tsx"],"names":["Cards","handleClick","flippedCards","matchedCards","cardsToRender","className","map","pokemon","i","onClick","some","card","src","sprite","alt","pokemonName","Table","numberOfCards","Fragment","length","Navbar","toggleModal","userMoves","refreshPokemons","clearCards","KantoIds","arr","Array","array","j","Math","floor","random","temp","shuffle","useFetchMons","num","useState","pokemons","setPokemons","pokemonsToFetch","slice","pokemonIds","allCards","forEach","id","fetch","then","res","json","data","name","pokemonId","sprites","front_default","pokemonCopy","push","allmons","sort","catch","error","console","log","useEffect","useCardStates","flipBack","addToMoves","resetMoves","storeScore","setFlippedCards","setMatchedCards","scoreVisible","setScoreVisible","evaluate","setTimeout","toggleScoreModal","a","b","state","clearTimeout","icon","document","querySelector","style","transform","ontransitionend","useScore","setUserMoves","highScores","localStorage","getItem","undefined","JSON","parse","setItem","stringify","getHighScore","highScore","SettingsModal","isVisible","decrementCards","incrementCards","ReactDOM","toString","ScoreModal","toggle","score","App","setIsVisible","useModal","setNumberOfCards","useNumberOfCards","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.17c964ac.chunk.js","sourcesContent":["import { CardsProps } from \"../interfaces\";\r\n\r\n\r\nexport const Cards = ({ handleClick, flippedCards, matchedCards, cardsToRender}: CardsProps): JSX.Element => {\r\n\r\n\r\n  return (\r\n    <div className=\"cards\">\r\n    { \r\n      cardsToRender.map((pokemon, i) => \r\n        (\r\n        <div className=\"card-wrapper\" key={i} onClick={()=>handleClick(i)}>  \r\n          <div className={\r\n            flippedCards.some((card: number)=> card === i) || matchedCards.some((card: number)=> card === i) \r\n            ? \"card-inner flipped\"\r\n            : \"card-inner\"\r\n            }>\r\n            <div className=\"card-front\">\r\n              <img src={pokemon.sprite} alt={pokemon.pokemonName} />\r\n            </div>\r\n            <div className=\"card-back\" />\r\n          </div>\r\n        </div>\r\n      ))\r\n    }    \r\n    </div>\r\n    )\r\n}\r\n","import { Cards, } from \"./cards\";\r\nimport { TableProps } from \"../interfaces\";\r\nimport React from \"react\";\r\n\r\n\r\n//COMPONENT\r\nexport const Table = ({numberOfCards, cardsToRender, handleClick, flippedCards, matchedCards }: TableProps) => {\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {cardsToRender.length === numberOfCards\r\n        ? <Cards \r\n            cardsToRender={cardsToRender}\r\n            numberOfCards={numberOfCards}\r\n            handleClick={handleClick}\r\n            flippedCards={flippedCards}\r\n            matchedCards={matchedCards}\r\n          />\r\n        : <div className=\"loading-message\">Loading cards...</div>}\r\n    </React.Fragment>\r\n  )\r\n}","import React from \"react\"\r\nimport { NavbarProps } from \"../interfaces\"\r\n\r\nexport const Navbar = ({ toggleModal, userMoves, refreshPokemons, clearCards }: NavbarProps): JSX.Element => {\r\n  \r\n  return (\r\n    <nav>\r\n      <div className=\"score\"><span className=\"label\">Moves:</span><span className=\"moves\">{userMoves}</span></div>\r\n      <div className=\"reset\" onClick={()=>{clearCards(); refreshPokemons()}}><span className=\"material-icons\">restart_alt</span></div>\r\n      <div className=\"menu\" onClick={toggleModal}><span className=\"material-icons\">settings</span></div>\r\n    </nav>\r\n\r\n  )\r\n}","import { Pokemon } from \"../interfaces\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\n//source for shuffling algorhythm: https://medium.com/@nitinpatel_20236/how-to-shuffle-correctly-shuffle-an-array-in-javascript-15ea3f84bfb\r\nexport const shuffle = (array: Pokemon[]|number[]) => {\r\n  for(let i = array.length - 1; i > 0; i--){\r\n    const j = Math.floor(Math.random() * i)\r\n    const temp = array[i]\r\n    array[i] = array[j]\r\n    array[j] = temp\r\n  }\r\n}\r\n\r\nconst KantoIds = (): number[] => {\r\n  const arr: number[] = new Array(150);\r\n  for (let i = 0; i < arr.length; i++){   //based on https://tutorial.eyehunts.com/js/javascript-fill-array-with-incrementing-numbers-integer-example-code/\r\n    arr[i] =i+1;\r\n  }\r\n  shuffle(arr)\r\n  return arr\r\n}\r\n\r\n//get the first n number of IDs based on number of cards settings\r\nexport const pokemonIds = (num: number): number[] => {\r\n  return KantoIds().slice(0, num/2);\r\n}\r\n\r\n\r\n//CUSTOM HOOK FOR FETCHING POKEMON DATA\r\n\r\nexport const useFetchMons = (num: number) => {\r\n  const [pokemons, setPokemons] = useState<Pokemon[]>([]); \r\n\r\n  const pokemonsToFetch = pokemonIds(num);\r\n\r\n  const refreshPokemons = () => {\r\n    let allCards: Pokemon[] = [];\r\n    pokemonsToFetch.forEach((id, i) => {\r\n      fetch(`https://pokeapi.co/api/v2/pokemon/${id}`)\r\n      .then(res => res.json())\r\n      .then((data) => {\r\n        const pokemon = {\r\n          pokemonName: data.name+\"_1\",\r\n          pokemonId: data.id,\r\n          sprite: `${data.sprites.front_default}`,\r\n        }\r\n        const pokemonCopy = {\r\n          pokemonName: data.name+\"_2\",\r\n          pokemonId: data.id,\r\n          sprite: `${data.sprites.front_default}`\r\n        }\r\n        allCards.push(pokemon, pokemonCopy); \r\n        return allCards;\r\n      })\r\n      .then((allmons)=> {\r\n        if (allmons.length === pokemonsToFetch.length *2) {\r\n          allmons.sort(()=> Math.random() - 0.5);\r\n          setPokemons(() => (allmons));\r\n        }\r\n      })\r\n      .catch((error)=> console.log(error));\r\n    });\r\n  }\r\n\r\n\r\n  useEffect(()=> {\r\n    refreshPokemons()\r\n  }, [num]);\r\n  return  { pokemons, refreshPokemons } \r\n}","\r\nimport { useState, useEffect } from \"react\";\r\nimport { CardStateProps } from \"../interfaces\";\r\n\r\nexport const useCardStates = ({pokemons, addToMoves, resetMoves, userMoves, numberOfCards, storeScore}: CardStateProps) => {\r\n  const [flippedCards, setFlippedCards] = useState<number[]>([]);\r\n  const [matchedCards, setMatchedCards] = useState<number[]>([]);\r\n  const [scoreVisible, setScoreVisible] = useState<boolean>(false);\r\n\r\n  //evaluate recently flipped cards \r\n  useEffect(()=>{\r\n    //if cards match keep\r\n    if (flippedCards.length === 2) {evaluate(flippedCards);};\r\n  }, [flippedCards])\r\n\r\n  useEffect(()=> {\r\n    if(matchedCards.length > 1 && matchedCards.length === pokemons.length) {\r\n      storeScore(userMoves);\r\n      setTimeout(()=>{toggleScoreModal();}, 1500);\r\n    }\r\n  }, [matchedCards]);\r\n\r\n  \r\n  //timeout to flip back cards if not matched\r\n  let flipBack:any; \r\n  const cardFlip = () => {flipBack = setTimeout(()=>{setFlippedCards(()=>([]))},1800);};\r\n  const noFlip = () => {clearTimeout(flipBack);};\r\n\r\n  const evaluate = (flippedCards: number[]):void => {\r\n    const [a, b] = flippedCards;\r\n    //if it's a match\r\n    if (pokemons[a].pokemonId === pokemons[b].pokemonId) {\r\n      setMatchedCards((state)=>([...state, a, b]));\r\n    } else {\r\n      cardFlip();\r\n    }\r\n  } \r\n\r\n  //handleclick\r\n  const handleClick = (i: number):void => {\r\n    //check if it's already flipped\r\n    if (flippedCards.some((id)=> id === i) || matchedCards.some((id)=> id === i)) {\r\n      return;\r\n    }\r\n    //add to flippedCards & add to moves\r\n    else if (flippedCards.length === 1) {\r\n      setFlippedCards((state)=>([...state, i]));\r\n      addToMoves();\r\n    } else {\r\n      setFlippedCards(()=>([i]));\r\n      addToMoves();\r\n      noFlip();\r\n    }\r\n  }\r\n\r\n  const clearCards = () => {\r\n    const icon = document.querySelector(\".reset\")!.querySelector(\"span\")!;\r\n    icon.style.transform = \"rotate(-360deg)\";\r\n    icon.ontransitionend = (()=>icon.style.transform= \"rotate(0deg)\");\r\n    setFlippedCards(()=>[]);\r\n    setMatchedCards(()=>[]);\r\n    //reset moves\r\n    resetMoves();\r\n  }\r\n\r\n  //toggle score modal\r\n  const toggleScoreModal = () => {\r\n    setScoreVisible(!scoreVisible);\r\n  }\r\n\r\n \r\n\r\n\r\n  return {flippedCards, matchedCards, handleClick, clearCards, toggleScoreModal, scoreVisible}\r\n\r\n}\r\n","import { useState } from \"react\"\r\nimport { HighScore } from \"../interfaces\";\r\n\r\n\r\nexport const useScore = (numberOfCards: number) => {\r\n  const [userMoves, setUserMoves] = useState<number>(0);\r\n  const addToMoves = () => {\r\n    setUserMoves((state)=> (state + 1));\r\n    console.log(userMoves);\r\n  }\r\n  \r\n  const resetMoves = () => {\r\n    setUserMoves(() => 0);\r\n  }\r\n  \r\n  //store recors in local storage\r\n  const storeScore = (num: number) => {    \r\n    let highScores: any = {};\r\n\r\n    //if highscores is not empty assign it to\r\n    if (localStorage.getItem(\"Highscores\") !== null) {\r\n      highScores = (localStorage.getItem(\"Highscores\"));\r\n      highScores = JSON.parse(highScores);\r\n      //if no record is stored with this many cards\r\n      if (highScores[numberOfCards] === undefined) {\r\n        highScores[numberOfCards] = num;\r\n        console.log(\"no record with this many cards\")\r\n        localStorage.setItem(\"Highscores\",  JSON.stringify(highScores))\r\n        console.log(highScores)\r\n        //if there is a record for that num of cards\r\n      } else if (highScores[numberOfCards] !== undefined) {\r\n        console.log(highScores)\r\n        console.log(\"there is already a record with this many cards\")\r\n        let storedRecord = highScores[numberOfCards];\r\n        //if the score is lower remove the previous score from the array and insert the new one    \r\n        if (storedRecord > num) {\r\n          console.log(\"this is a new record\")\r\n          //add current score\r\n          highScores[numberOfCards] = num;\r\n          //add to localstorage\r\n          localStorage.setItem(\"Highscores\",  JSON.stringify(highScores))\r\n        }    \r\n      }\r\n      //if there is no previous record\r\n    } else {\r\n      \r\n      console.log(\"the highscores object was empty\")\r\n      highScores[numberOfCards] = num;\r\n      localStorage.setItem(\"Highscores\", JSON.stringify(highScores));\r\n      console.log(highScores)\r\n    }\r\n\r\n  }\r\n\r\n  const getHighScore = (): number => {\r\n    let highScore: any = localStorage.getItem(\"Highscores\");\r\n    highScore = JSON.parse(highScore);\r\n    console.log(highScore)\r\n    return highScore[numberOfCards];\r\n  }\r\n\r\n  return { userMoves, addToMoves, resetMoves, storeScore, getHighScore }\r\n}","import * as React from 'react'\r\nimport * as ReactDOM from 'react-dom'\r\nimport { SettingsModalProps } from '../interfaces'\r\n\r\n  \r\nexport  const SettingsModal = ({ isVisible, toggleModal, decrementCards, incrementCards, numberOfCards}: SettingsModalProps ) => {\r\n\r\n  return isVisible\r\n  ? ReactDOM.createPortal(\r\n      <div className=\"modal-wrapper\">\r\n        <div className=\"container\">\r\n            <h3>Number of Pokémons</h3>\r\n          <div className=\"number-of-cards\">\r\n            <span onClick={()=>decrementCards()} className=\"material-icons\">remove</span>\r\n            <span className=\"number-of-mons\">{numberOfCards.toString()}</span>\r\n            <span onClick={()=>incrementCards()} className=\"material-icons\">add</span>\r\n          </div>\r\n\r\n            <button onClick={toggleModal}>OK</button>\r\n        </div>\r\n      </div>, document.querySelector(\"#modal\")!\r\n    )\r\n  : null;\r\n}\r\n\r\n\r\n","import * as React from 'react'\r\nimport * as ReactDOM from 'react-dom'\r\nimport { ScoreModalProps } from '../interfaces';\r\n\r\nexport  const ScoreModal = ({toggle, isVisible, score, refreshPokemons, clearCards, resetMoves, getHighScore}: ScoreModalProps) => {\r\n\r\n  return isVisible\r\n  ? ReactDOM.createPortal(\r\n      <div className=\"modal-wrapper\">\r\n        <div className=\"container\">\r\n        <h3>Congratulations!</h3>\r\n        <div className=\"message-wrapper\">\r\n            <p>You got all the pairs in</p>\r\n            <strong>{score}</strong>\r\n            <p>moves.</p>\r\n            <br />\r\n            <p>Your personal best is <b>{getHighScore()}</b> moves</p>\r\n        </div>\r\n            <button \r\n              onClick={()=> {\r\n                toggle();\r\n                refreshPokemons();\r\n                clearCards();\r\n                resetMoves();\r\n              }\r\n            }>OK</button>\r\n        </div>\r\n      </div>, document.querySelector(\"#modal\")!\r\n    )\r\n  : null;\r\n}\r\n","import React from 'react';\r\nimport { Table } from './components/table';\r\nimport { Navbar } from './components/navbar'\r\nimport { useNumberOfCards } from './hooks/number-of-cards'\r\nimport { useModal } from './hooks/settings-hook';\r\nimport { useFetchMons } from './hooks/get-random-mons';\r\nimport { useCardStates } from './hooks/card-state';\r\nimport { useScore } from './hooks/score-hook';\r\nimport { SettingsModal } from './components/settings-modal';\r\nimport {ScoreModal} from './components/score-modal';\r\n\r\nfunction App() {\r\n\r\n  const { isVisible, toggleModal} = useModal();\r\n  const { numberOfCards, incrementCards, decrementCards } = useNumberOfCards();\r\n  const { pokemons, refreshPokemons } = useFetchMons(numberOfCards);\r\n  const { userMoves, addToMoves, resetMoves, getHighScore } = useScore(numberOfCards);\r\n  const { storeScore } = useScore(numberOfCards);\r\n  const { flippedCards, matchedCards, handleClick, clearCards, toggleScoreModal, scoreVisible } = useCardStates({pokemons, addToMoves, resetMoves, userMoves, numberOfCards, storeScore});\r\n\r\n\r\n  return (\r\n    <React.Fragment>\r\n    <Table \r\n      //number of cards\r\n      numberOfCards={numberOfCards}\r\n      cardsToRender={pokemons}\r\n      handleClick={handleClick}\r\n      flippedCards={flippedCards}\r\n      matchedCards={matchedCards}\r\n    />\r\n    <Navbar \r\n      toggleModal={toggleModal}\r\n      userMoves={userMoves}\r\n      refreshPokemons={refreshPokemons}\r\n      clearCards={clearCards}\r\n    />\r\n    <SettingsModal \r\n      numberOfCards={numberOfCards}\r\n      incrementCards={incrementCards}\r\n      decrementCards={decrementCards}\r\n      isVisible={isVisible} \r\n      toggleModal={toggleModal}\r\n    />\r\n    <ScoreModal \r\n      toggle={toggleScoreModal}\r\n      isVisible={scoreVisible}\r\n      score={userMoves}\r\n      clearCards={clearCards}\r\n      resetMoves={resetMoves}\r\n      refreshPokemons={refreshPokemons}\r\n      getHighScore={getHighScore}\r\n    />\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","//from https://medium.com/swlh/building-modals-in-react-64d92591f4b\r\n\r\nimport { useState } from \"react\";\r\n\r\nexport const useModal = () => {\r\n  const [isVisible, setIsVisible] = useState(false);\r\n  \r\n  function toggleModal() {\r\n    setIsVisible(!isVisible);\r\n  }\r\n\r\n  return {\r\n    isVisible,\r\n    toggleModal,\r\n  }\r\n};\r\n\r\n\r\n\r\n","import { useState } from \"react\";\r\n\r\nexport const useNumberOfCards = () => {\r\n  const [numberOfCards, setNumberOfCards] = useState<number>(12)\r\n\r\n  //increment & decrement number of cards\r\n\r\n  const incrementCards = () => {\r\n    if (numberOfCards < 28) {\r\n      setNumberOfCards((state)=>(state+4));\r\n    }\r\n  }\r\n  \r\n  const decrementCards = () => {\r\n    if (numberOfCards > 4) {\r\n      setNumberOfCards((state)=>(state-4));\r\n    }\r\n  }\r\n  \r\n  return { numberOfCards, incrementCards, decrementCards, }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}